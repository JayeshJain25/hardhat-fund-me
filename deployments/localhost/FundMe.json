{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xa1e31fab8ed28f0e71a81f8199abddfc310b3015bd5864c6c71d0cd4987afc83",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1041478",
    "logsBloom": "0x
    "blockHash": "0xebcd06a99aa04f1d94bbcd25d1f6ab706628e327f863fad53ee2c248ce3084f0",
    "transactionHash": "0xa1e31fab8ed28f0e71a81f8199abddfc310b3015bd5864c6c71d0cd4987afc83",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1041478",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
  "numDeployments": 1,
  "solcInputHash": "66f2a065fecc4d9611d20249ab1c107c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Jayesh Jain\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function fund this contract\"}},\"notice\":\"This contract is to demo a simple funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/** @title A contract for crowd funding\\n *  @author Jayesh Jain\\n *  @notice This contract is to demo a simple funding contract\\n *  @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n  using PriceConverter for uint256;\\n\\n  mapping(address => uint256) private s_addressToAmountFunded;\\n  address[] private s_funders;\\n\\n  // Could we make this constant?  /* hint: no! We should make it immutable! */\\n  address private immutable i_owner;\\n  uint256 public constant MINIMUM_USD = 50 * 10**18;\\n\\n  AggregatorV3Interface private s_priceFeed;\\n\\n  modifier onlyOwner() {\\n    // require(msg.sender == owner);\\n    if (msg.sender != i_owner) revert FundMe__NotOwner();\\n    _;\\n  }\\n\\n  constructor(address priceFeedAddress) {\\n    i_owner = msg.sender;\\n    s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n  }\\n\\n  receive() external payable {\\n    fund();\\n  }\\n\\n  fallback() external payable {\\n    fund();\\n  }\\n\\n  /** @notice This function fund this contract\\n   *  @dev This implements price feeds as our library\\n   */\\n  function fund() public payable {\\n    require(\\n      msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n      \\\"You need to spend more ETH!\\\"\\n    );\\n    // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n    s_addressToAmountFunded[msg.sender] += msg.value;\\n    s_funders.push(msg.sender);\\n  }\\n\\n  function withdraw() public onlyOwner {\\n    for (\\n      uint256 funderIndex = 0;\\n      funderIndex < s_funders.length;\\n      funderIndex++\\n    ) {\\n      address funder = s_funders[funderIndex];\\n      s_addressToAmountFunded[funder] = 0;\\n    }\\n    s_funders = new address[](0);\\n    // // transfer\\n    // payable(msg.sender).transfer(address(this).balance);\\n    // // send\\n    // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n    // require(sendSuccess, \\\"Send failed\\\");\\n    // call\\n    (bool callSuccess, ) = payable(msg.sender).call{\\n      value: address(this).balance\\n    }(\\\"\\\");\\n    require(callSuccess, \\\"Call failed\\\");\\n  }\\n\\n  function cheaperWithdraw() public payable onlyOwner {\\n    address[] memory memoryFunder = s_funders;\\n    for (\\n      uint256 funderIndex = 0;\\n      funderIndex < memoryFunder.length;\\n      funderIndex++\\n    ) {\\n      address funder = memoryFunder[funderIndex];\\n      s_addressToAmountFunded[funder] = 0;\\n    }\\n    s_funders = new address[](0);\\n    (bool callSuccess, ) = payable(msg.sender).call{\\n      value: address(this).balance\\n    }(\\\"\\\");\\n    require(callSuccess, \\\"Call failed\\\");\\n  }\\n\\n  function getOwner() public view returns (address) {\\n    return i_owner;\\n  }\\n\\n  function getFunder(uint256 index) public view returns (address) {\\n    return s_funders[index];\\n  }\\n\\n  function getAddressToAmountFunded(address funder)\\n    public\\n    view\\n    returns (uint256)\\n  {\\n    return s_addressToAmountFunded[funder];\\n  }\\n\\n  function getPriceFeed() public view returns (AggregatorV3Interface) {\\n    return s_priceFeed;\\n  }\\n\\n  // Explainer from: https://solidity-by-example.org/fallback/\\n  // Ether is sent to contract\\n  //      is msg.data empty?\\n  //          /   \\\\\\n  //         yes  no\\n  //         /     \\\\\\n  //    receive()?  fallback()\\n  //     /   \\\\\\n  //   yes   no\\n  //  /        \\\\\\n  //receive()  fallback()\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\",\"keccak256\":\"0x4ba87e1865f6c5a4c08174ef3299b3e9963f2651276ece399c27393ba0ce0e04\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n  // We could make this public, but then we'd have to deploy it\\n  function getPrice(AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    // Goerli ETH / USD Address\\n    // https://docs.chain.link/docs/ethereum-addresses/\\n    // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n    //   priceFeed\\n    // );\\n    (, int256 answer, , , ) = priceFeed.latestRoundData();\\n    // ETH/USD rate in 18 digit\\n    return uint256(answer * 10000000000);\\n  }\\n\\n  // 1000000000\\n  function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n    internal\\n    view\\n    returns (uint256)\\n  {\\n    uint256 ethPrice = getPrice(priceFeed);\\n    uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n    // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n    return ethAmountInUsd;\\n  }\\n}\\n\",\"keccak256\":\"0xb651bfcc6fa9db5b54bd6ee53fc635522dc73f9c950832800b79c7e5a1cc2a75\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012f8380380620012f8833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6111796200017f600039600081816103420152818161059101526105e101526111796000f3fe60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c146101815761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ab1565b6102f8565b6040516100cc9190610af7565b60405180910390f35b3480156100e157600080fd5b506100ea610340565b005b3480156100f857600080fd5b50610101610580565b60405161010e9190610af7565b60405180910390f35b34801561012357600080fd5b5061012c61058d565b6040516101399190610b21565b60405180910390f35b34801561014e57600080fd5b506101576105b5565b6040516101649190610b9b565b60405180910390f35b6101756101be565b005b61017f6105df565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610be2565b610883565b6040516101b59190610b21565b60405180910390f35b6802b5e3af16b18800006101fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108cb90919063ffffffff16565b101561023e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023590610c6c565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461028c9190610cbb565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c5576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610470576000600182815481106103eb576103ea610d11565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046890610d40565b9150506103c8565b50600067ffffffffffffffff81111561048c5761048b610d89565b5b6040519080825280602002602001820160405280156104ba5781602001602082028036833780820191505090505b50600190805190602001906104d09291906109a7565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104f790610de9565b60006040518083038185875af1925050503d8060008114610534576040519150601f19603f3d011682016040523d82523d6000602084013e610539565b606091505b505090508061057d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057490610e4a565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610664576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106e857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161069e575b5050505050905060005b81518110156107725760008282815181106107105761070f610d11565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061076a90610d40565b9150506106f2565b50600067ffffffffffffffff81111561078e5761078d610d89565b5b6040519080825280602002602001820160405280156107bc5781602001602082028036833780820191505090505b50600190805190602001906107d29291906109a7565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107f990610de9565b60006040518083038185875af1925050503d8060008114610836576040519150601f19603f3d011682016040523d82523d6000602084013e61083b565b606091505b505090508061087f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087690610e4a565b60405180910390fd5b5050565b60006001828154811061089957610898610d11565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108d783610907565b90506000670de0b6b3a764000085836108f09190610e6a565b6108fa9190610ef3565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095057600080fd5b505afa158015610964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109889190610fb1565b5050509150506402540be4008161099f919061102c565b915050919050565b828054828255906000526020600020908101928215610a20579160200282015b82811115610a1f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109c7565b5b509050610a2d9190610a31565b5090565b5b80821115610a4a576000816000905550600101610a32565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7e82610a53565b9050919050565b610a8e81610a73565b8114610a9957600080fd5b50565b600081359050610aab81610a85565b92915050565b600060208284031215610ac757610ac6610a4e565b5b6000610ad584828501610a9c565b91505092915050565b6000819050919050565b610af181610ade565b82525050565b6000602082019050610b0c6000830184610ae8565b92915050565b610b1b81610a73565b82525050565b6000602082019050610b366000830184610b12565b92915050565b6000819050919050565b6000610b61610b5c610b5784610a53565b610b3c565b610a53565b9050919050565b6000610b7382610b46565b9050919050565b6000610b8582610b68565b9050919050565b610b9581610b7a565b82525050565b6000602082019050610bb06000830184610b8c565b92915050565b610bbf81610ade565b8114610bca57600080fd5b50565b600081359050610bdc81610bb6565b92915050565b600060208284031215610bf857610bf7610a4e565b5b6000610c0684828501610bcd565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c56601b83610c0f565b9150610c6182610c20565b602082019050919050565b60006020820190508181036000830152610c8581610c49565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cc682610ade565b9150610cd183610ade565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d0657610d05610c8c565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d4b82610ade565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d7e57610d7d610c8c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dd3600083610db8565b9150610dde82610dc3565b600082019050919050565b6000610df482610dc6565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e34600b83610c0f565b9150610e3f82610dfe565b602082019050919050565b60006020820190508181036000830152610e6381610e27565b9050919050565b6000610e7582610ade565b9150610e8083610ade565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eb957610eb8610c8c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610efe82610ade565b9150610f0983610ade565b925082610f1957610f18610ec4565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f4381610f24565b8114610f4e57600080fd5b50565b600081519050610f6081610f3a565b92915050565b6000819050919050565b610f7981610f66565b8114610f8457600080fd5b50565b600081519050610f9681610f70565b92915050565b600081519050610fab81610bb6565b92915050565b600080600080600060a08688031215610fcd57610fcc610a4e565b5b6000610fdb88828901610f51565b9550506020610fec88828901610f87565b9450506040610ffd88828901610f9c565b935050606061100e88828901610f9c565b925050608061101f88828901610f51565b9150509295509295909350565b600061103782610f66565b915061104283610f66565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561108157611080610c8c565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110be576110bd610c8c565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110fb576110fa610c8c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561113857611137610c8c565b5b82820290509291505056fea264697066735822122015f6536e0e48c583a40e2feaf3c8a62c20e90519bc254dc3a6dbbb2f77c97dd364736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007f5760003560e01c80639e87a5cd1161004e5780639e87a5cd14610142578063b60d42881461016d578063be2693f014610177578063d7b4750c146101815761008e565b80630343fb25146100985780633ccfd60b146100d55780636b69a592146100ec578063893d20e8146101175761008e565b3661008e5761008c6101be565b005b6100966101be565b005b3480156100a457600080fd5b506100bf60048036038101906100ba9190610ab1565b6102f8565b6040516100cc9190610af7565b60405180910390f35b3480156100e157600080fd5b506100ea610340565b005b3480156100f857600080fd5b50610101610580565b60405161010e9190610af7565b60405180910390f35b34801561012357600080fd5b5061012c61058d565b6040516101399190610b21565b60405180910390f35b34801561014e57600080fd5b506101576105b5565b6040516101649190610b9b565b60405180910390f35b6101756101be565b005b61017f6105df565b005b34801561018d57600080fd5b506101a860048036038101906101a39190610be2565b610883565b6040516101b59190610b21565b60405180910390f35b6802b5e3af16b18800006101fd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108cb90919063ffffffff16565b101561023e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161023590610c6c565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461028c9190610cbb565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103c5576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b600180549050811015610470576000600182815481106103eb576103ea610d11565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061046890610d40565b9150506103c8565b50600067ffffffffffffffff81111561048c5761048b610d89565b5b6040519080825280602002602001820160405280156104ba5781602001602082028036833780820191505090505b50600190805190602001906104d09291906109a7565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516104f790610de9565b60006040518083038185875af1925050503d8060008114610534576040519150601f19603f3d011682016040523d82523d6000602084013e610539565b606091505b505090508061057d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057490610e4a565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610664576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156106e857602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161069e575b5050505050905060005b81518110156107725760008282815181106107105761070f610d11565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061076a90610d40565b9150506106f2565b50600067ffffffffffffffff81111561078e5761078d610d89565b5b6040519080825280602002602001820160405280156107bc5781602001602082028036833780820191505090505b50600190805190602001906107d29291906109a7565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516107f990610de9565b60006040518083038185875af1925050503d8060008114610836576040519150601f19603f3d011682016040523d82523d6000602084013e61083b565b606091505b505090508061087f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161087690610e4a565b60405180910390fd5b5050565b60006001828154811061089957610898610d11565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108d783610907565b90506000670de0b6b3a764000085836108f09190610e6a565b6108fa9190610ef3565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095057600080fd5b505afa158015610964573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109889190610fb1565b5050509150506402540be4008161099f919061102c565b915050919050565b828054828255906000526020600020908101928215610a20579160200282015b82811115610a1f5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109c7565b5b509050610a2d9190610a31565b5090565b5b80821115610a4a576000816000905550600101610a32565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a7e82610a53565b9050919050565b610a8e81610a73565b8114610a9957600080fd5b50565b600081359050610aab81610a85565b92915050565b600060208284031215610ac757610ac6610a4e565b5b6000610ad584828501610a9c565b91505092915050565b6000819050919050565b610af181610ade565b82525050565b6000602082019050610b0c6000830184610ae8565b92915050565b610b1b81610a73565b82525050565b6000602082019050610b366000830184610b12565b92915050565b6000819050919050565b6000610b61610b5c610b5784610a53565b610b3c565b610a53565b9050919050565b6000610b7382610b46565b9050919050565b6000610b8582610b68565b9050919050565b610b9581610b7a565b82525050565b6000602082019050610bb06000830184610b8c565b92915050565b610bbf81610ade565b8114610bca57600080fd5b50565b600081359050610bdc81610bb6565b92915050565b600060208284031215610bf857610bf7610a4e565b5b6000610c0684828501610bcd565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610c56601b83610c0f565b9150610c6182610c20565b602082019050919050565b60006020820190508181036000830152610c8581610c49565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cc682610ade565b9150610cd183610ade565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610d0657610d05610c8c565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610d4b82610ade565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d7e57610d7d610c8c565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610dd3600083610db8565b9150610dde82610dc3565b600082019050919050565b6000610df482610dc6565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610e34600b83610c0f565b9150610e3f82610dfe565b602082019050919050565b60006020820190508181036000830152610e6381610e27565b9050919050565b6000610e7582610ade565b9150610e8083610ade565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610eb957610eb8610c8c565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610efe82610ade565b9150610f0983610ade565b925082610f1957610f18610ec4565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f4381610f24565b8114610f4e57600080fd5b50565b600081519050610f6081610f3a565b92915050565b6000819050919050565b610f7981610f66565b8114610f8457600080fd5b50565b600081519050610f9681610f70565b92915050565b600081519050610fab81610bb6565b92915050565b600080600080600060a08688031215610fcd57610fcc610a4e565b5b6000610fdb88828901610f51565b9550506020610fec88828901610f87565b9450506040610ffd88828901610f9c565b935050606061100e88828901610f9c565b925050608061101f88828901610f51565b9150509295509295909350565b600061103782610f66565b915061104283610f66565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561108157611080610c8c565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110be576110bd610c8c565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110fb576110fa610c8c565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561113857611137610c8c565b5b82820290509291505056fea264697066735822122015f6536e0e48c583a40e2feaf3c8a62c20e90519bc254dc3a6dbbb2f77c97dd364736f6c63430008080033",
  "devdoc": {
    "author": "Jayesh Jain",
    "details": "This implements price feeds as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function fund this contract"
      }
    },
    "notice": "This contract is to demo a simple funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
